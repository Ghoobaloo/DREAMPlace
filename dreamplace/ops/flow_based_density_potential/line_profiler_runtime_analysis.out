=== Basic Multigrid Poisson Solver Test ===

--- Test 1: Simple 8x8 grid, constant RHS ---
Built 2 levels: ['8x8', '4x4']
Solution range: [0.000000, 0.070021]
Solution norm: 0.283799
Center value: 0.070021
Expected max ≈ 0.0703125 for -∇²φ = 1

--- Test 2: Zero RHS ---
Built 2 levels: ['8x8', '4x4']
Converged in 1 iterations, residual: 0.00e+00
Zero RHS error: 0.00e+00

--- Test 3: Single-mode sine function ---
Built 2 levels: ['8x8', '4x4']
RHS max: 0.950485
Computed center: 0.048969
Exact center: 0.048152
Computed max: 0.048969
Exact max: 0.048152
Relative error: 1.70e-02
Center point error: 1.70e-02

✓ Basic tests PASSED
=== Multimodal Source → Uniform Target on 128x128 Grid ===

--- Solving with max_iterations=1 ---
Built 6 levels: ['128x128', '64x64', '32x32', '16x16', '8x8', '4x4']
Elapsed time: 7.21 seconds
Velocity magnitude stats @ max_iter=1:
  min: 0.0000e+00
  max: 5.8650e+00
  mean: 1.2657e+00
  median: 1.1273e+00
Visualizing transport for max_iter=1...

--- Solving with max_iterations=3 ---
Built 6 levels: ['128x128', '64x64', '32x32', '16x16', '8x8', '4x4']
Elapsed time: 20.10 seconds
Velocity magnitude stats @ max_iter=3:
  min: 0.0000e+00
  max: 6.3576e+00
  mean: 1.7511e+00
  median: 1.5787e+00
Visualizing transport for max_iter=3...

--- Solving with max_iterations=5 ---
Built 6 levels: ['128x128', '64x64', '32x32', '16x16', '8x8', '4x4']
Elapsed time: 34.23 seconds
Velocity magnitude stats @ max_iter=5:
  min: 0.0000e+00
  max: 6.3369e+00
  mean: 1.9224e+00
  median: 1.7389e+00
Visualizing transport for max_iter=5...
Wrote profile results to test_multi_grid_solver.py.lprof
Timer unit: 1e-06 s

Total time: 2.17299 s
File: test_multi_grid_solver.py
Function: smooth_jit_vectorized at line 133

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   133                                           @profile
   134                                           def smooth_jit_vectorized(
   135                                               phi: torch.Tensor,
   136                                               rhs: torch.Tensor,
   137                                               weights: torch.Tensor,
   138                                               h_x: float,
   139                                               h_y: float,
   140                                               num_iterations: int,
   141                                               boundary_conditions: str = "dirichlet",
   142                                               omega: float = 1.2
   143                                           ) -> torch.Tensor:
   144                                               """
   145                                               Red-Black Gauss-Seidel SOR in TorchScript + torch.roll.
   146                                               """
   147       172       1587.4      9.2      0.1      nx, ny = phi.size()
   148       172        209.3      1.2      0.0      dx2 = h_x * h_x
   149       172        156.0      0.9      0.0      dy2 = h_y * h_y
   150                                           
   151                                               # build red/black masks once
   152       172      12049.7     70.1      0.6      red_mask = torch.zeros(nx, ny, dtype=torch.bool)
   153      5292       1357.0      0.3      0.1      for i in range(nx):
   154    403200      93177.4      0.2      4.3          for j in range(ny):
   155    398080      99982.6      0.3      4.6              if ((i + j) % 2) == 0:
   156    199040    1089496.3      5.5     50.1                  red_mask[i, j] = True
   157       172      12432.0     72.3      0.6      black_mask = ~red_mask
   158                                           
   159       172        278.9      1.6      0.0      i = 0
   160       918        493.4      0.5      0.0      while i < num_iterations:
   161                                                   # enforce BCs
   162       746     171399.1    229.8      7.9          phi = apply_bc(phi, boundary_conditions)
   163                                           
   164                                                   # --- RED pass ---
   165                                                   # roll neighbors
   166       746      21042.9     28.2      1.0          pe = torch.roll(phi, -1, 0); pw = torch.roll(phi, 1, 0)
   167       746      12511.7     16.8      0.6          pn = torch.roll(phi, -1, 1); ps = torch.roll(phi, 1, 1)
   168                                                   # harmonic weights
   169       746        342.5      0.5      0.0          wc = weights
   170       746       8345.0     11.2      0.4          we = torch.roll(wc, -1, 0); ww = torch.roll(wc, 1, 0)
   171       746      10608.5     14.2      0.5          wn = torch.roll(wc, -1, 1); ws = torch.roll(wc, 1, 1)
   172       746      18229.5     24.4      0.8          rho_e = 2.0 * wc * we / (wc + we + 1e-12)
   173       746      13080.3     17.5      0.6          rho_w = 2.0 * wc * ww / (wc + ww + 1e-12)
   174       746      12040.1     16.1      0.6          rho_n = 2.0 * wc * wn / (wc + wn + 1e-12)
   175       746      12267.2     16.4      0.6          rho_s = 2.0 * wc * ws / (wc + ws + 1e-12)
   176       746      12743.0     17.1      0.6          center = (rho_e + rho_w) / dx2 + (rho_n + rho_s) / dy2
   177       746      26856.5     36.0      1.2          neigh = (rho_e*pe/dx2 + rho_w*pw/dx2 + rho_n*pn/dy2 + rho_s*ps/dy2)
   178       746      38027.7     51.0      1.8          phi_new = torch.where(center > 1e-12, (neigh + rhs) / center, phi)
   179                                                   # update only red sites
   180       746      12497.0     16.8      0.6          phi = torch.where(red_mask, phi + omega * (phi_new - phi), phi)
   181       746     168272.8    225.6      7.7          phi = apply_bc(phi, boundary_conditions)
   182                                           
   183                                                   # --- BLACK pass (same but mask=black) ---
   184       746       9445.0     12.7      0.4          pe = torch.roll(phi, -1, 0); pw = torch.roll(phi, 1, 0)
   185       746      11560.0     15.5      0.5          pn = torch.roll(phi, -1, 1); ps = torch.roll(phi, 1, 1)
   186       746       8220.5     11.0      0.4          we = torch.roll(wc, -1, 0); ww = torch.roll(wc, 1, 0)
   187       746      10597.8     14.2      0.5          wn = torch.roll(wc, -1, 1); ws = torch.roll(wc, 1, 1)
   188       746      15122.2     20.3      0.7          rho_e = 2.0 * wc * we / (wc + we + 1e-12)
   189       746      12230.2     16.4      0.6          rho_w = 2.0 * wc * ww / (wc + ww + 1e-12)
   190       746      12069.2     16.2      0.6          rho_n = 2.0 * wc * wn / (wc + wn + 1e-12)
   191       746      11847.9     15.9      0.5          rho_s = 2.0 * wc * ws / (wc + ws + 1e-12)
   192       746      12474.3     16.7      0.6          center = (rho_e + rho_w) / dx2 + (rho_n + rho_s) / dy2
   193       746      24796.9     33.2      1.1          neigh = (rho_e*pe/dx2 + rho_w*pw/dx2 + rho_n*pn/dy2 + rho_s*ps/dy2)
   194       746      18649.4     25.0      0.9          phi_new = torch.where(center > 1e-12, (neigh + rhs) / center, phi)
   195       746      10624.0     14.2      0.5          phi = torch.where(black_mask, phi + omega * (phi_new - phi), phi)
   196       746     165534.0    221.9      7.6          phi = apply_bc(phi, boundary_conditions)
   197                                           
   198       746        302.1      0.4      0.0          i += 1
   199                                           
   200       172         31.0      0.2      0.0      return phi

Total time: 62.6906 s
File: test_multi_grid_solver.py
Function: solve at line 215

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   215                                               @profile
   216                                               def solve(self, rhs, weights, h_x, h_y, boundary_conditions='dirichlet'):
   217                                                   """
   218                                                   Solve weighted Poisson equation: -∇·(ρ∇φ) = f
   219                                                   
   220                                                   Args:
   221                                                       rhs: Right-hand side f(x,y) [nx, ny] 
   222                                                       weights: Density weights ρ(x,y) [nx, ny]
   223                                                       h_x, h_y: Grid spacing
   224                                                       boundary_conditions: 'neumann' or 'dirichlet'
   225                                                       
   226                                                   Returns:
   227                                                       phi: Potential field [nx, ny]
   228                                                   """
   229         6        380.6     63.4      0.0          nx, ny = rhs.shape
   230                                                   
   231                                                   # Initialize solution
   232         6       1619.8    270.0      0.0          phi = torch.zeros_like(rhs)
   233                                                   
   234                                                   # Build multigrid hierarchy
   235         6    1765118.1 294186.3      2.8          grids = self._build_grid_hierarchy(rhs, weights, h_x, h_y)
   236                                                   
   237                                                   # V-cycle iterations
   238        55        119.0      2.2      0.0          for iteration in range(self.max_iterations):
   239        50       1435.5     28.7      0.0              phi_old = phi.clone()
   240        50   40183536.9 803670.7     64.1              phi = self._v_cycle(phi, grids, 0, boundary_conditions)
   241                                                       
   242                                                       # Check convergence
   243        50   20737817.5 414756.4     33.1              residual_norm = self._compute_residual_norm(phi, grids[0])
   244        50        561.7     11.2      0.0              if residual_norm < self.tolerance:
   245         1         28.8     28.8      0.0                  print(f"Converged in {iteration+1} iterations, residual: {residual_norm:.2e}")
   246         1          0.5      0.5      0.0                  break
   247                                                           
   248         6          2.8      0.5      0.0          return phi

Total time: 1.7645 s
File: test_multi_grid_solver.py
Function: _build_grid_hierarchy at line 250

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   250                                               @profile
   251                                               def _build_grid_hierarchy(self, rhs, weights, h_x, h_y):
   252                                                   """Build coarsened grid hierarchy"""
   253         6          8.1      1.3      0.0          grids = []
   254         6       1435.1    239.2      0.1          current_rhs = rhs.clone()
   255         6        325.3     54.2      0.0          current_weights = weights.clone()
   256         6         11.9      2.0      0.0          current_hx, current_hy = h_x, h_y
   257                                           
   258        24         58.1      2.4      0.0          for level in range(self.num_levels):
   259        24         50.2      2.1      0.0              grid = {
   260        24          6.2      0.3      0.0                  'rhs': current_rhs,
   261        24         14.3      0.6      0.0                  'weights': current_weights,
   262        24          5.3      0.2      0.0                  'h_x': current_hx,
   263        24         27.4      1.1      0.0                  'h_y': current_hy,
   264        24         86.2      3.6      0.0                  'nx': current_rhs.shape[0],
   265        24         16.4      0.7      0.0                  'ny': current_rhs.shape[1]
   266                                                       }
   267        24         58.8      2.5      0.0              grids.append(grid)
   268                                           
   269        24         83.0      3.5      0.0              if current_rhs.shape[0] <= 4 or current_rhs.shape[1] <= 4:
   270         6          8.0      1.3      0.0                  break
   271                                           
   272        18     896375.6  49798.6     50.8              current_rhs = self._restrict(current_rhs)
   273        18     865490.2  48082.8     49.1              current_weights = self._restrict(current_weights)
   274        18         44.7      2.5      0.0              current_hx *= 2
   275        18         21.8      1.2      0.0              current_hy *= 2
   276                                           
   277         6        146.8     24.5      0.0          grid_sizes = [f"{g['nx']}x{g['ny']}" for g in grids]
   278         6        223.0     37.2      0.0          print(f"Built {len(grids)} levels: {grid_sizes}")
   279         6          1.9      0.3      0.0          return grids

Total time: 40.1809 s
File: test_multi_grid_solver.py
Function: _v_cycle at line 281

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   281                                               @profile
   282                                               def _v_cycle(self, phi, grids, level, boundary_conditions):
   283                                                   """Execute one V-cycle"""
   284       136        434.3      3.2      0.0          if level == len(grids) - 1:
   285                                                       # Coarsest grid - exact solve or many iterations to machine precision
   286        50      58905.7   1178.1      0.1              return self._coarse_solve(phi, grids[level], boundary_conditions)
   287                                                   
   288                                                   # Pre-smoothing
   289                                                   # phi = self._smooth(phi, grids[level], self.num_pre_smooth, boundary_conditions, omega=1.2)
   290       172    1092308.6   6350.6      2.7          phi = smooth_jit_vectorized(phi, grids[level]['rhs'], grids[level]['weights'],
   291        86        196.5      2.3      0.0                           grids[level]['h_x'], grids[level]['h_y'],
   292        86        215.5      2.5      0.0                           self.num_pre_smooth, boundary_conditions, omega=1.2)
   293                                                   
   294                                                   # Compute residual
   295        86   26421159.8 307222.8     65.8          residual = self._compute_residual(phi, grids[level])
   296                                                   
   297                                                   # Restrict to coarser grid
   298        86    3087869.0  35905.5      7.7          coarse_residual = self._restrict(residual)
   299        86       6272.9     72.9      0.0          coarse_phi = torch.zeros_like(coarse_residual)
   300                                                   
   301                                                   # Update coarse grid RHS
   302        86       1497.6     17.4      0.0          grids[level+1]['rhs'] = coarse_residual
   303                                                   
   304                                                   # Recursively solve on coarser grid
   305        86       1062.0     12.3      0.0          coarse_correction = self._v_cycle(coarse_phi, grids, level+1, boundary_conditions)
   306                                                   
   307                                                   # Prolongate correction back to fine grid
   308        86    8178453.8  95098.3     20.4          correction = self._prolongate(coarse_correction, grids[level]['nx'], grids[level]['ny'])
   309        86       2390.0     27.8      0.0          phi += correction
   310                                                   
   311                                                   # Apply boundary conditions after prolongation
   312        86       5790.5     67.3      0.0          phi = self._apply_boundary_conditions(phi, boundary_conditions)
   313                                                   
   314                                                   # Post-smoothing
   315                                                   # phi = self._smooth(phi, grids[level], self.num_post_smooth, boundary_conditions, omega=1.2)
   316       172    1324008.8   7697.7      3.3          phi = smooth_jit_vectorized(phi, grids[level]['rhs'], grids[level]['weights'],
   317        86        254.8      3.0      0.0                           grids[level]['h_x'], grids[level]['h_y'],
   318        86         60.3      0.7      0.0                           self.num_post_smooth, boundary_conditions, omega=1.2)
   319                                                   
   320        86         14.6      0.2      0.0          return phi

Total time: 0.056046 s
File: test_multi_grid_solver.py
Function: _coarse_solve at line 322

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   322                                               @profile
   323                                               def _coarse_solve(self, phi, grid, boundary_conditions):
   324                                                   """Direct solve for small coarse grid"""
   325        50        218.0      4.4      0.4          nx, ny = grid['nx'], grid['ny']
   326        50         16.3      0.3      0.0          rhs = grid['rhs']
   327        50         12.4      0.2      0.0          weights = grid['weights']
   328        50        108.7      2.2      0.2          h_x, h_y = grid['h_x'], grid['h_y']
   329                                           
   330        50         25.6      0.5      0.0          if nx <= 4 and ny <= 4:
   331                                                       # Build matrix A and flatten rhs for Ax = b
   332        50         23.5      0.5      0.0              dx2 = h_x * h_x
   333        50         13.2      0.3      0.0              dy2 = h_y * h_y
   334                                           
   335        50         16.1      0.3      0.0              n = nx * ny
   336        50       2499.3     50.0      4.5              A = torch.zeros(n, n, device=phi.device)
   337        50       1359.8     27.2      2.4              b = rhs.flatten()
   338                                           
   339        50        354.0      7.1      0.6              def idx(i, j): return i * ny + j
   340                                           
   341       250         98.5      0.4      0.2              for i in range(nx):
   342      1000        398.3      0.4      0.7                  for j in range(ny):
   343       800        576.6      0.7      1.0                      k = idx(i, j)
   344       800        332.2      0.4      0.6                      if i == 0 or j == 0 or i == nx - 1 or j == ny - 1:
   345       600       2870.1      4.8      5.1                          A[k, k] = 1.0  # Dirichlet BC
   346       600       2205.8      3.7      3.9                          b[k] = 0.0
   347                                                               else:
   348       200       5251.9     26.3      9.4                          rho_e = 2 * weights[i, j] * weights[i + 1, j] / (weights[i, j] + weights[i + 1, j] + 1e-12)
   349       200       4525.5     22.6      8.1                          rho_w = 2 * weights[i, j] * weights[i - 1, j] / (weights[i, j] + weights[i - 1, j] + 1e-12)
   350       200       4429.5     22.1      7.9                          rho_n = 2 * weights[i, j] * weights[i, j + 1] / (weights[i, j] + weights[i, j + 1] + 1e-12)
   351       200       4354.1     21.8      7.8                          rho_s = 2 * weights[i, j] * weights[i, j - 1] / (weights[i, j] + weights[i, j - 1] + 1e-12)
   352                                           
   353       200       2565.5     12.8      4.6                          center = (rho_e + rho_w) / dx2 + (rho_n + rho_s) / dy2
   354                                           
   355       200       2387.4     11.9      4.3                          A[k, idx(i + 1, j)] = -rho_e / dx2
   356       200       2323.3     11.6      4.1                          A[k, idx(i - 1, j)] = -rho_w / dx2
   357       200       2346.2     11.7      4.2                          A[k, idx(i, j + 1)] = -rho_n / dy2
   358       200       2224.3     11.1      4.0                          A[k, idx(i, j - 1)] = -rho_s / dy2
   359       200        743.8      3.7      1.3                          A[k, k] = center
   360                                           
   361        50         13.0      0.3      0.0              try:
   362        50        693.8     13.9      1.2                  x = torch.linalg.solve(A, b.unsqueeze(1)).squeeze(1)
   363        50         98.2      2.0      0.2              except AttributeError:
   364        50      11737.7    234.8     20.9                  x, _ = torch.solve(b.unsqueeze(1), A)
   365        50        943.8     18.9      1.7                  x = x.squeeze(1)
   366                                           
   367        50        279.6      5.6      0.5              return x.view(nx, ny)
   368                                           
   369                                                   else:
   370                                                       # Fallback to smoothing
   371                                                       return self._smooth(phi, grid, 100, boundary_conditions)

Total time: 0 s
File: test_multi_grid_solver.py
Function: _smooth at line 373

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   373                                               @profile
   374                                               def _smooth(self, phi, grid, num_iterations, boundary_conditions, omega=1.2):
   375                                                   """
   376                                                   Red-Black Gauss-Seidel with over-relaxation (SOR)
   377                                                   Discretization: -∇·(ρ∇φ) = f
   378                                                   """
   379                                                   rhs = grid['rhs']
   380                                                   weights = grid['weights']
   381                                                   h_x, h_y = grid['h_x'], grid['h_y']
   382                                                   nx, ny = grid['nx'], grid['ny']
   383                                                   
   384                                                   dx2 = h_x * h_x
   385                                                   dy2 = h_y * h_y
   386                                           
   387                                                   for iteration in range(num_iterations):
   388                                                       phi = self._apply_boundary_conditions(phi, boundary_conditions)
   389                                                       for color in [0, 1]:
   390                                                           for i in range(1, nx - 1):
   391                                                               for j in range(1, ny - 1):
   392                                                                   if (i + j) % 2 == color:
   393                                                                       rho_e = 2 * weights[i, j] * weights[i + 1, j] / (weights[i, j] + weights[i + 1, j] + 1e-12)
   394                                                                       rho_w = 2 * weights[i, j] * weights[i - 1, j] / (weights[i, j] + weights[i - 1, j] + 1e-12)
   395                                                                       rho_n = 2 * weights[i, j] * weights[i, j + 1] / (weights[i, j] + weights[i, j + 1] + 1e-12)
   396                                                                       rho_s = 2 * weights[i, j] * weights[i, j - 1] / (weights[i, j] + weights[i, j - 1] + 1e-12)
   397                                           
   398                                                                       center = (rho_e + rho_w) / dx2 + (rho_n + rho_s) / dy2
   399                                                                       if center > 1e-12:
   400                                                                           sum_neighbors = (
   401                                                                               rho_e * phi[i + 1, j] / dx2 +
   402                                                                               rho_w * phi[i - 1, j] / dx2 +
   403                                                                               rho_n * phi[i, j + 1] / dy2 +
   404                                                                               rho_s * phi[i, j - 1] / dy2
   405                                                                           )
   406                                                                           phi_new = (sum_neighbors + rhs[i, j]) / center
   407                                                                           phi[i, j] += omega * (phi_new - phi[i, j])
   408                                                       phi = self._apply_boundary_conditions(phi, boundary_conditions)
   409                                                   return phi

Total time: 46.0247 s
File: test_multi_grid_solver.py
Function: _compute_residual at line 411

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   411                                               @profile
   412                                               def _compute_residual(self, phi, grid):
   413                                                   """Compute residual r = f - L(φ) where L(φ) = -∇·(ρ∇φ)"""
   414       136        104.7      0.8      0.0          rhs = grid['rhs']
   415       136         57.0      0.4      0.0          weights = grid['weights']
   416       136         78.7      0.6      0.0          h_x, h_y = grid['h_x'], grid['h_y']
   417       136        133.8      1.0      0.0          nx, ny = grid['nx'], grid['ny']
   418                                                   
   419       136       2050.2     15.1      0.0          residual = torch.zeros_like(phi)
   420       136         97.2      0.7      0.0          dx2 = h_x * h_x
   421       136         40.3      0.3      0.0          dy2 = h_y * h_y
   422                                                   
   423                                                   # Apply flux-based operator L(φ) = -∇·(ρ∇φ) to interior points
   424      3904       1295.8      0.3      0.0          for i in range(1, nx-1):
   425    337272     122075.6      0.4      0.3              for j in range(1, ny-1):
   426                                                           
   427                                                           # Face-centered weights (harmonic averages)
   428    333504    7189246.7     21.6     15.6                  rho_east = 2.0 * weights[i,j] * weights[i+1,j] / (weights[i,j] + weights[i+1,j] + 1e-12)
   429    333504    7110940.2     21.3     15.5                  rho_west = 2.0 * weights[i,j] * weights[i-1,j] / (weights[i,j] + weights[i-1,j] + 1e-12)
   430    333504    7042970.9     21.1     15.3                  rho_north = 2.0 * weights[i,j] * weights[i,j+1] / (weights[i,j] + weights[i,j+1] + 1e-12)
   431    333504    7025172.1     21.1     15.3                  rho_south = 2.0 * weights[i,j] * weights[i,j-1] / (weights[i,j] + weights[i,j-1] + 1e-12)
   432                                                           
   433                                                           # Flux divergence: ∇·(ρ∇φ)
   434    333504     116003.4      0.3      0.3                  flux_div = (
   435    667008    7292361.7     10.9     15.8                      (rho_east * (phi[i+1,j] - phi[i,j]) - rho_west * (phi[i,j] - phi[i-1,j])) / dx2 +
   436    333504    6609445.0     19.8     14.4                      (rho_north * (phi[i,j+1] - phi[i,j]) - rho_south * (phi[i,j] - phi[i,j-1])) / dy2
   437                                                           )
   438                                                           
   439                                                           # Apply operator: L(φ) = -∇·(ρ∇φ)  
   440    333504     738521.1      2.2      1.6                  L_phi = -flux_div
   441                                                           
   442                                                           # Residual: r = f - L(φ)
   443    333504    2773917.5      8.3      6.0                  residual[i,j] = rhs[i,j] - L_phi
   444                                                           
   445       136        141.6      1.0      0.0          return residual

Total time: 20.7334 s
File: test_multi_grid_solver.py
Function: _compute_residual_norm at line 447

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   447                                               @profile
   448                                               def _compute_residual_norm(self, phi, grid):
   449                                                   """Compute L2 norm of residual"""
   450        50   20720974.8 414419.5     99.9          residual = self._compute_residual(phi, grid)
   451        50      12400.1    248.0      0.1          return torch.norm(residual).item()

Total time: 4.47365 s
File: test_multi_grid_solver.py
Function: _restrict at line 453

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   453                                               @profile
   454                                               def _restrict(self, fine_grid):
   455                                                   """Full-weighting restriction operator"""
   456       122        930.2      7.6      0.0          nx, ny = fine_grid.shape
   457       122        132.4      1.1      0.0          coarse_nx = nx // 2
   458       122         81.2      0.7      0.0          coarse_ny = ny // 2
   459                                                   
   460       244      24346.7     99.8      0.5          coarse_grid = torch.zeros(coarse_nx, coarse_ny, 
   461       122       1645.7     13.5      0.0                                   dtype=fine_grid.dtype, device=fine_grid.device)
   462                                                   
   463                                                   # Full-weighting interior points
   464      1926        842.1      0.4      0.0          for i in range(1, coarse_nx-1):
   465     76692      27146.2      0.4      0.6              for j in range(1, coarse_ny-1):
   466     74888      19812.2      0.3      0.4                  i_fine = 2 * i
   467     74888      13552.5      0.2      0.3                  j_fine = 2 * j
   468                                                           
   469                                                           # 9-point full-weighting stencil
   470     74888     707436.7      9.4     15.8                  coarse_grid[i,j] = (
   471    224664     809803.9      3.6     18.1                      4.0 * fine_grid[i_fine, j_fine] +
   472    224664    1068083.2      4.8     23.9                      2.0 * (fine_grid[i_fine-1, j_fine] + fine_grid[i_fine+1, j_fine] +
   473    149776     328299.7      2.2      7.3                             fine_grid[i_fine, j_fine-1] + fine_grid[i_fine, j_fine+1]) +
   474    224664    1055364.3      4.7     23.6                      1.0 * (fine_grid[i_fine-1, j_fine-1] + fine_grid[i_fine-1, j_fine+1] +
   475    149776     343092.9      2.3      7.7                             fine_grid[i_fine+1, j_fine-1] + fine_grid[i_fine+1, j_fine+1])
   476     74888      14421.1      0.2      0.3                  ) / 16.0
   477                                                           
   478                                                   # Handle boundaries by injection
   479       366       1132.4      3.1      0.0          for i in [0, coarse_nx-1]:
   480      4340       1580.9      0.4      0.0              for j in range(coarse_ny):
   481      4096       3700.8      0.9      0.1                  i_fine = min(2*i, nx-1)
   482      4096       2234.2      0.5      0.0                  j_fine = min(2*j, ny-1)
   483      4096      24113.1      5.9      0.5                  coarse_grid[i,j] = fine_grid[i_fine, j_fine]
   484                                                           
   485       366        194.1      0.5      0.0          for j in [0, coarse_ny-1]:
   486      3852       1066.4      0.3      0.0              for i in range(1, coarse_nx-1):
   487      3608       1575.6      0.4      0.0                  i_fine = 2*i
   488      3608       1988.6      0.6      0.0                  j_fine = min(2*j, ny-1)
   489      3608      20984.2      5.8      0.5                  coarse_grid[i,j] = fine_grid[i_fine, j_fine]
   490                                                           
   491       122         84.5      0.7      0.0          return coarse_grid

Total time: 7.44632 s
File: test_multi_grid_solver.py
Function: _prolongate at line 493

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   493                                               @profile
   494                                               def _prolongate(self, coarse_grid, fine_nx, fine_ny):
   495                                                   """Bilinear interpolation prolongation"""
   496        86        108.6      1.3      0.0          coarse_nx, coarse_ny = coarse_grid.shape
   497       172        977.8      5.7      0.0          fine_grid = torch.zeros(fine_nx, fine_ny, 
   498        86        121.5      1.4      0.0                                 dtype=coarse_grid.dtype, device=coarse_grid.device)
   499                                                   
   500                                                   # Bilinear interpolation for all points
   501      2646        606.2      0.2      0.0          for i in range(fine_nx):
   502    201600      63643.1      0.3      0.9              for j in range(fine_ny):
   503                                                           # Map fine grid coordinates to coarse grid
   504    199040      60584.7      0.3      0.8                  i_coarse_float = i / 2.0
   505    199040      41943.6      0.2      0.6                  j_coarse_float = j / 2.0
   506                                                           
   507                                                           # Get integer indices
   508    199040      81182.9      0.4      1.1                  i_coarse = int(i_coarse_float)
   509    199040      51946.1      0.3      0.7                  j_coarse = int(j_coarse_float)
   510                                                           
   511                                                           # Interpolation weights
   512    199040      47086.1      0.2      0.6                  alpha = i_coarse_float - i_coarse
   513    199040      37893.1      0.2      0.5                  beta = j_coarse_float - j_coarse
   514                                                           
   515                                                           # Bounds checking and interpolation
   516    199040      58768.4      0.3      0.8                  if i_coarse < coarse_nx-1 and j_coarse < coarse_ny-1:
   517    189144     835384.5      4.4     11.2                      fine_grid[i,j] = (
   518    756576    2360168.4      3.1     31.7                          (1-alpha) * (1-beta) * coarse_grid[i_coarse, j_coarse] +
   519    189144    1256778.3      6.6     16.9                          alpha * (1-beta) * coarse_grid[i_coarse+1, j_coarse] +
   520    189144    1233812.5      6.5     16.6                          (1-alpha) * beta * coarse_grid[i_coarse, j_coarse+1] +
   521    189144    1240146.8      6.6     16.7                          alpha * beta * coarse_grid[i_coarse+1, j_coarse+1]
   522                                                               )
   523      9896       2331.9      0.2      0.0                  elif i_coarse < coarse_nx and j_coarse < coarse_ny:
   524                                                               # Handle boundaries
   525      9896      72776.2      7.4      1.0                      fine_grid[i,j] = coarse_grid[min(i_coarse, coarse_nx-1), min(j_coarse, coarse_ny-1)]
   526                                                           
   527        86         63.6      0.7      0.0          return fine_grid

Total time: 0.00440478 s
File: test_multi_grid_solver.py
Function: _apply_boundary_conditions at line 529

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   529                                               @profile
   530                                               def _apply_boundary_conditions(self, phi, boundary_conditions):
   531                                                   """Apply boundary conditions"""
   532        86        159.8      1.9      3.6          if boundary_conditions == 'neumann':
   533                                                       # Zero Neumann - copy from adjacent interior
   534                                                       phi[0, :] = phi[1, :]       # Left
   535                                                       phi[-1, :] = phi[-2, :]     # Right  
   536                                                       phi[:, 0] = phi[:, 1]       # Bottom
   537                                                       phi[:, -1] = phi[:, -2]     # Top
   538        86        101.4      1.2      2.3          elif boundary_conditions == 'dirichlet':
   539                                                       # Zero Dirichlet
   540        86       2401.3     27.9     54.5              phi[0, :] = 0
   541        86        617.4      7.2     14.0              phi[-1, :] = 0
   542        86        558.6      6.5     12.7              phi[:, 0] = 0
   543        86        543.7      6.3     12.3              phi[:, -1] = 0
   544                                                       
   545        86         22.6      0.3      0.5          return phi

